// Script pour forcer la r√©√©criture du fichier et √©liminer le cache Babel/Vite persistant
import fs from 'fs';

const filePath = 'src/modules/NewJob/JobModal.jsx';

console.log('üîß Force rewrite pour √©liminer le cache Babel/Vite persistant...');

// Lire le fichier actuel
let content = fs.readFileSync(filePath, 'utf8');

console.log('üìä Statistiques actuelles:');
console.log(`   Lignes: ${content.split('\n').length}`);
console.log(`   Taille: ${(content.length / 1024).toFixed(1)} KB`);

// V√©rifier les patterns sp√©cifiques qui posent probl√®me
const fragmentPattern = /<>\s*$/gm;
const closeFragmentPattern = /^\s*<\/>/gm;

const openFragments = (content.match(fragmentPattern) || []).length;
const closeFragments = (content.match(closeFragmentPattern) || []).length;

console.log(`   Fragments ouverts (<>): ${openFragments}`);
console.log(`   Fragments ferm√©s (</>): ${closeFragments}`);

// Si on trouve encore des fragments, les remplacer de force
if (openFragments > 0 || closeFragments > 0) {
    console.log('üö´ Fragments d√©tect√©s - suppression forc√©e...');

    // Remplacer TOUS les fragments par des divs
    content = content.replace(/<>\s*$/gm, '<div className="jsx-fragment-wrapper">');
    content = content.replace(/^\s*<\/>/gm, '</div>');

    console.log('‚úÖ Fragments remplac√©s par des div wrappers');
}

// Forcer une r√©√©criture en cr√©ant un nouveau fichier temporaire puis en le renommant
const tempPath = filePath + '.temp';

// √âcrire dans un fichier temporaire
fs.writeFileSync(tempPath, content, 'utf8');

// Supprimer l'original
fs.unlinkSync(filePath);

// Renommer le temporaire
fs.renameSync(tempPath, filePath);

console.log('üî• Fichier r√©√©crit physiquement pour forcer le cache bust');

// V√©rification finale
const newContent = fs.readFileSync(filePath, 'utf8');
const newOpenFragments = (newContent.match(fragmentPattern) || []).length;
const newCloseFragments = (newContent.match(closeFragmentPattern) || []).length;

console.log('üîç V√©rification finale:');
console.log(`   Fragments ouverts (<>): ${newOpenFragments}`);
console.log(`   Fragments ferm√©s (</>): ${newCloseFragments}`);
console.log(`   ${newOpenFragments === 0 && newCloseFragments === 0 ? '‚úÖ' : '‚ùå'} √âtat des fragments`);