<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendrier Job d'Huile - Version Complète</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide-react/0.263.1/umd/lucide-react.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;
        const { Calendar, Users, Settings, Plus, Edit2, Trash2, Clock, MapPin, X, Save, AlertCircle, ChevronLeft, ChevronRight, Download, Upload, UserPlus, Wrench, Copy, FileText, Search, Filter, Eye, EyeOff } = lucide;

        const GestionnaireJobsComplet = () => {
            // États principaux
            const [jobs, setJobs] = useState([]);
            const [employes, setEmployes] = useState([
                { id: 1, nom: "Éric Dufort", poste: "1.1 -TECH", succursale: "MDL - Sherbrooke", disponible: true, email: "eric@mdl.com", telephone: "450-123-4567" },
                { id: 2, nom: "Carl Lévesque", poste: "1.2 - ING.", succursale: "MDL - Terrebonne", disponible: true, email: "carl@mdl.com", telephone: "450-123-4568" },
                { id: 3, nom: "Miguel Morin", poste: "1.3 - CPI", succursale: "MDL - Québec", disponible: true, email: "miguel@mdl.com", telephone: "418-123-4567" },
                { id: 4, nom: "Chad Rodrigue", poste: "1.4 - COORD.", succursale: "DUAL - Sherbrooke", disponible: true, email: "chad@dual.com", telephone: "819-123-4567" },
                { id: 5, nom: "Alexandre Gariépy-Gauvin", poste: "1.5 - D.T.", succursale: "CFM - St-Jean-sur-le-Richelieu", disponible: true, email: "alex@cfm.com", telephone: "450-123-4569" }
            ]);

            const [equipements, setEquipements] = useState([
                { id: 1, nom: "DOBLE M4000", type: "Instrument", succursale: "MDL - Sherbrooke", disponible: true, numeroSerie: "DM4000-001", derniereMaintenance: "2025-08-15" },
                { id: 2, nom: "DOBLE SFRA", type: "Instrument", succursale: "MDL - Terrebonne", disponible: true, numeroSerie: "SFRA-002", derniereMaintenance: "2025-08-10" },
                { id: 3, nom: "TTR", type: "Test", succursale: "MDL - Québec", disponible: true, numeroSerie: "TTR-003", derniereMaintenance: "2025-07-20" },
                { id: 4, nom: "WINDING", type: "Bobinage", succursale: "DUAL - Sherbrooke", disponible: true, numeroSerie: "WIN-004", derniereMaintenance: "2025-08-01" }
            ]);

            // États pour l'interface
            const [activeTab, setActiveTab] = useState('calendrier');
            const [selectedCell, setSelectedCell] = useState({ employeId: null, day: null });
            const [showJobModal, setShowJobModal] = useState(false);
            const [showEmployeModal, setShowEmployeModal] = useState(false);
            const [showEquipementModal, setShowEquipementModal] = useState(false);
            const [editingJob, setEditingJob] = useState(null);
            const [editingEmploye, setEditingEmploye] = useState(null);
            const [editingEquipement, setEditingEquipement] = useState(null);
            const [startDate, setStartDate] = useState(new Date(2025, 8, 1));
            const [numberOfDays, setNumberOfDays] = useState(30);
            const [searchTerm, setSearchTerm] = useState('');
            const [filterPoste, setFilterPoste] = useState('tous');
            const [hiddenEmployes, setHiddenEmployes] = useState(new Set());

            // État pour le formulaire de job
            const [jobForm, setJobForm] = useState({
                numeroJob: '',
                nom: '',
                description: '',
                dateDebut: '',
                heureDebut: '08:00',
                dateFin: '',
                heureFin: '17:00',
                techniciens: [],
                equipements: [],
                lieu: '',
                priorite: 'normale',
                statut: 'planifie',
                client: '',
                budget: '',
                notes: ''
            });

            // État pour le formulaire employé
            const [employeForm, setEmployeForm] = useState({
                nom: '',
                poste: '1.1 -TECH',
                succursale: '',
                email: '',
                telephone: '',
                disponible: true
            });

            // État pour le formulaire équipement
            const [equipementForm, setEquipementForm] = useState({
                nom: '',
                type: 'Instrument',
                succursale: '',
                numeroSerie: '',
                derniereMaintenance: '',
                disponible: true
            });

            // Générer la liste continue des jours
            const generateContinuousDays = () => {
                const days = [];
                const current = new Date(startDate);
                
                for (let i = 0; i < numberOfDays; i++) {
                    days.push({
                        date: new Date(current),
                        dayNumber: current.getDate(),
                        dayName: current.toLocaleDateString('fr-FR', { weekday: 'short' }).toUpperCase(),
                        monthName: current.toLocaleDateString('fr-FR', { month: 'short' }),
                        isWeekend: current.getDay() === 0 || current.getDay() === 6,
                        isToday: current.toDateString() === new Date().toDateString()
                    });
                    current.setDate(current.getDate() + 1);
                }
                
                return days;
            };

            const continuousDays = generateContinuousDays();

            // Filtrer les employés
            const filteredEmployes = employes.filter(employe => {
                const matchesSearch = employe.nom.toLowerCase().includes(searchTerm.toLowerCase()) ||
                                     employe.poste.toLowerCase().includes(searchTerm.toLowerCase()) ||
                                     employe.succursale.toLowerCase().includes(searchTerm.toLowerCase());
                const matchesFilter = filterPoste === 'tous' || employe.poste.includes(filterPoste);
                const notHidden = !hiddenEmployes.has(employe.id);
                return matchesSearch && matchesFilter && notHidden;
            });

            // Fonctions utilitaires
            const formatDate = (date) => {
                return date.toISOString().split('T')[0];
            };

            const getJobForCell = (employeId, day) => {
                const dateStr = formatDate(day.date);
                return jobs.find(job => 
                    job.techniciens.includes(employeId) && 
                    dateStr >= job.dateDebut && 
                    dateStr <= job.dateFin
                );
            };

            const resetJobForm = () => {
                setJobForm({
                    numeroJob: generateJobNumber(),
                    nom: '',
                    description: '',
                    dateDebut: selectedCell.day ? formatDate(selectedCell.day.date) : '',
                    heureDebut: '08:00',
                    dateFin: selectedCell.day ? formatDate(selectedCell.day.date) : '',
                    heureFin: '17:00',
                    techniciens: selectedCell.employeId ? [selectedCell.employeId] : [],
                    equipements: [],
                    lieu: '',
                    priorite: 'normale',
                    statut: 'planifie',
                    client: '',
                    budget: '',
                    notes: ''
                });
            };

            const resetEmployeForm = () => {
                setEmployeForm({
                    nom: '',
                    poste: '1.1 -TECH',
                    succursale: '',
                    email: '',
                    telephone: '',
                    disponible: true
                });
            };

            const resetEquipementForm = () => {
                setEquipementForm({
                    nom: '',
                    type: 'Instrument',
                    succursale: '',
                    numeroSerie: '',
                    derniereMaintenance: '',
                    disponible: true
                });
            };

            // Génération automatique de numéro de job
            const generateJobNumber = () => {
                const year = new Date().getFullYear();
                const month = String(new Date().getMonth() + 1).padStart(2, '0');
                const existingNumbers = jobs
                    .filter(job => job.numeroJob.startsWith(`G${year.toString().slice(-2)}-${month}`))
                    .map(job => parseInt(job.numeroJob.split('-')[1]) || 0);
                const nextNumber = Math.max(0, ...existingNumbers) + 1;
                return `G${year.toString().slice(-2)}-${month}${String(nextNumber).padStart(2, '0')}`;
            };

            // Gestionnaires d'événements
            const handleCellClick = (employeId, day) => {
                const existingJob = getJobForCell(employeId, day);
                
                if (existingJob) {
                    setEditingJob(existingJob);
                    setJobForm({ ...existingJob });
                } else {
                    setSelectedCell({ employeId, day });
                    setEditingJob(null);
                    resetJobForm();
                }
                setShowJobModal(true);
            };

            const handleSaveJob = () => {
                if (!jobForm.numeroJob || !jobForm.nom || !jobForm.dateDebut) {
                    alert('Veuillez remplir les champs obligatoires');
                    return;
                }

                const jobData = {
                    ...jobForm,
                    id: editingJob ? editingJob.id : Date.now(),
                    dateCreation: editingJob ? editingJob.dateCreation : new Date().toISOString()
                };

                if (editingJob) {
                    setJobs(jobs.map(job => job.id === editingJob.id ? jobData : job));
                } else {
                    setJobs([...jobs, jobData]);
                }

                setShowJobModal(false);
                resetJobForm();
                setEditingJob(null);
                setSelectedCell({ employeId: null, day: null });
            };

            const handleSaveEmploye = () => {
                if (!employeForm.nom || !employeForm.poste) {
                    alert('Veuillez remplir les champs obligatoires');
                    return;
                }

                const employeData = {
                    ...employeForm,
                    id: editingEmploye ? editingEmploye.id : Date.now()
                };

                if (editingEmploye) {
                    setEmployes(employes.map(emp => emp.id === editingEmploye.id ? employeData : emp));
                } else {
                    setEmployes([...employes, employeData]);
                }

                setShowEmployeModal(false);
                resetEmployeForm();
                setEditingEmploye(null);
            };

            const handleSaveEquipement = () => {
                if (!equipementForm.nom || !equipementForm.type) {
                    alert('Veuillez remplir les champs obligatoires');
                    return;
                }

                const equipementData = {
                    ...equipementForm,
                    id: editingEquipement ? editingEquipement.id : Date.now()
                };

                if (editingEquipement) {
                    setEquipements(equipements.map(eq => eq.id === editingEquipement.id ? equipementData : eq));
                } else {
                    setEquipements([...equipements, equipementData]);
                }

                setShowEquipementModal(false);
                resetEquipementForm();
                setEditingEquipement(null);
            };

            const handleDeleteJob = () => {
                if (editingJob && window.confirm('Êtes-vous sûr de vouloir supprimer ce job ?')) {
                    setJobs(jobs.filter(job => job.id !== editingJob.id));
                    setShowJobModal(false);
                    setEditingJob(null);
                }
            };

            const toggleTechnicien = (techId) => {
                setJobForm(prev => ({
                    ...prev,
                    techniciens: prev.techniciens.includes(techId)
                        ? prev.techniciens.filter(id => id !== techId)
                        : [...prev.techniciens, techId]
                }));
            };

            const toggleEquipement = (eqId) => {
                setJobForm(prev => ({
                    ...prev,
                    equipements: prev.equipements.includes(eqId)
                        ? prev.equipements.filter(id => id !== eqId)
                        : [...prev.equipements, eqId]
                }));
            };

            // Navigation
            const navigateWeeks = (direction) => {
                const newDate = new Date(startDate);
                newDate.setDate(newDate.getDate() + (direction * 7));
                setStartDate(newDate);
            };

            const navigateMonths = (direction) => {
                const newDate = new Date(startDate);
                newDate.setMonth(newDate.getMonth() + direction);
                setStartDate(newDate);
            };

            const goToToday = () => {
                setStartDate(new Date());
            };

            // Export/Import
            const exportData = () => {
                const data = {
                    jobs,
                    employes,
                    equipements,
                    exportDate: new Date().toISOString(),
                    version: '1.0'
                };
                
                const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `calendrier-jobs-${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            };

            const importData = (event) => {
                const file = event.target.files[0];
                if (!file) return;

                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const data = JSON.parse(e.target.result);
                        if (data.jobs) setJobs(data.jobs);
                        if (data.employes) setEmployes(data.employes);
                        if (data.equipements) setEquipements(data.equipements);
                        alert('Données importées avec succès !');
                    } catch (error) {
                        alert('Erreur lors de l\'importation des données');
                    }
                };
                reader.readAsText(file);
            };

            // Couleurs par priorité
            const getPriorityColor = (priorite) => {
                switch (priorite) {
                    case 'urgent': return 'bg-red-200 border-red-400 text-red-900';
                    case 'haute': return 'bg-orange-200 border-orange-400 text-orange-900';
                    case 'normale': return 'bg-blue-200 border-blue-400 text-blue-900';
                    case 'faible': return 'bg-gray-200 border-gray-400 text-gray-900';
                    default: return 'bg-blue-200 border-blue-400 text-blue-900';
                }
            };

            const getPostColor = (poste) => {
                if (poste.includes('TECH')) return 'bg-blue-50 border-blue-200';
                if (poste.includes('ING')) return 'bg-green-50 border-green-200';
                if (poste.includes('COORD')) return 'bg-purple-50 border-purple-200';
                if (poste.includes('ADMIN')) return 'bg-gray-50 border-gray-200';
                return 'bg-yellow-50 border-yellow-200';
            };

            // Sauvegarde automatique
            useEffect(() => {
                const timer = setTimeout(() => {
                    localStorage.setItem('calendrier-complet-data', JSON.stringify({ 
                        jobs, 
                        employes, 
                        equipements, 
                        hiddenEmployes: Array.from(hiddenEmployes),
                        startDate: startDate.toISOString(),
                        numberOfDays 
                    }));
                }, 1000);
                return () => clearTimeout(timer);
            }, [jobs, employes, equipements, hiddenEmployes, startDate, numberOfDays]);

            // Chargement des données
            useEffect(() => {
                const saved = localStorage.getItem('calendrier-complet-data');
                if (saved) {
                    const data = JSON.parse(saved);
                    if (data.jobs) setJobs(data.jobs);
                    if (data.employes) setEmployes(data.employes);
                    if (data.equipements) setEquipements(data.equipements);
                    if (data.hiddenEmployes) setHiddenEmployes(new Set(data.hiddenEmployes));
                    if (data.startDate) setStartDate(new Date(data.startDate));
                    if (data.numberOfDays) setNumberOfDays(data.numberOfDays);
                }
            }, []);

            return React.createElement('div', { className: "min-h-screen bg-gray-50 p-4" },
                React.createElement('div', { className: "max-w-full mx-auto" },
                    // Header
                    React.createElement('div', { className: "bg-white rounded-lg shadow-sm p-6 mb-6" },
                        React.createElement('div', { className: "flex justify-between items-center mb-4" },
                            React.createElement('h1', { className: "text-3xl font-bold text-gray-900" }, "Calendrier Job d'Huile"),
                            React.createElement('div', { className: "flex items-center space-x-4" },
                                React.createElement('span', { className: "text-sm text-gray-600" }, 
                                    `${jobs.length} job${jobs.length !== 1 ? 's' : ''} • ${employes.length} employé${employes.length !== 1 ? 's' : ''} • ${equipements.length} équipement${equipements.length !== 1 ? 's' : ''}`
                                ),
                                React.createElement('div', { className: "flex space-x-2" },
                                    React.createElement('button', {
                                        onClick: exportData,
                                        className: "flex items-center space-x-2 px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
                                    },
                                        React.createElement(Download, { size: 16 }),
                                        React.createElement('span', null, "Exporter")
                                    ),
                                    React.createElement('label', {
                                        className: "flex items-center space-x-2 px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors cursor-pointer"
                                    },
                                        React.createElement(Upload, { size: 16 }),
                                        React.createElement('span', null, "Importer"),
                                        React.createElement('input', { 
                                            type: "file", 
                                            accept: ".json", 
                                            onChange: importData, 
                                            className: "hidden" 
                                        })
                                    )
                                )
                            )
                        ),
                        
                        // Navigation
                        React.createElement('div', { className: "flex justify-between items-center" },
                            React.createElement('div', { className: "flex space-x-2" },
                                React.createElement('button', {
                                    onClick: () => setActiveTab('calendrier'),
                                    className: `flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${activeTab === 'calendrier' ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`
                                },
                                    React.createElement(Calendar, { size: 18 }),
                                    React.createElement('span', null, "Calendrier")
                                ),
                                React.createElement('button', {
                                    onClick: () => setActiveTab('ressources'),
                                    className: `flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${activeTab === 'ressources' ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`
                                },
                                    React.createElement(Users, { size: 18 }),
                                    React.createElement('span', null, "Ressources")
                                )
                            ),
                            
                            // Navigation temporelle
                            activeTab === 'calendrier' && React.createElement('div', { className: "flex items-center space-x-4" },
                                React.createElement('div', { className: "flex items-center space-x-2" },
                                    React.createElement('button', {
                                        onClick: () => navigateMonths(-1),
                                        className: "p-2 hover:bg-gray-100 rounded-lg",
                                        title: "Mois précédent"
                                    }, React.createElement(ChevronLeft, { size: 20 })),
                                    React.createElement('button', {
                                        onClick: () => navigateWeeks(-1),
                                        className: "px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded"
                                    }, "-1S"),
                                    React.createElement('button', {
                                        onClick: goToToday,
                                        className: "px-3 py-1 text-sm bg-blue-100 hover:bg-blue-200 rounded text-blue-600"
                                    }, "Aujourd'hui"),
                                    React.createElement('span', { 
                                        className: "text-lg font-semibold min-w-[200px] text-center" 
                                    }, startDate.toLocaleDateString('fr-FR', { month: 'long', year: 'numeric' })),
                                    React.createElement('button', {
                                        onClick: () => navigateWeeks(1),
                                        className: "px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded"
                                    }, "+1S"),
                                    React.createElement('button', {
                                        onClick: () => navigateMonths(1),
                                        className: "p-2 hover:bg-gray-100 rounded-lg",
                                        title: "Mois suivant"
                                    }, React.createElement(ChevronRight, { size: 20 }))
                                ),
                                React.createElement('select', {
                                    value: numberOfDays,
                                    onChange: (e) => setNumberOfDays(parseInt(e.target.value)),
                                    className: "p-2 border border-gray-300 rounded-lg"
                                },
                                    React.createElement('option', { value: 14 }, "2 semaines"),
                                    React.createElement('option', { value: 21 }, "3 semaines"),
                                    React.createElement('option', { value: 30 }, "1 mois"),
                                    React.createElement('option', { value: 60 }, "2 mois"),
                                    React.createElement('option', { value: 90 }, "3 mois")
                                )
                            )
                        )
                    ),

                    // Contenu principal - Calendrier
                    activeTab === 'calendrier' && React.createElement('div', { className: "bg-white rounded-lg shadow-sm overflow-hidden" },
                        // Barre de recherche
                        React.createElement('div', { className: "p-4 border-b bg-gray-50 flex justify-between items-center" },
                            React.createElement('div', { className: "flex items-center space-x-4" },
                                React.createElement('div', { className: "relative" },
                                    React.createElement(Search, { 
                                        size: 20, 
                                        className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" 
                                    }),
                                    React.createElement('input', {
                                        type: "text",
                                        placeholder: "Rechercher un employé...",
                                        value: searchTerm,
                                        onChange: (e) => setSearchTerm(e.target.value),
                                        className: "pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    })
                                ),
                                React.createElement('select', {
                                    value: filterPoste,
                                    onChange: (e) => setFilterPoste(e.target.value),
                                    className: "p-2 border border-gray-300 rounded-lg"
                                },
                                    React.createElement('option', { value: "tous" }, "Tous les postes"),
                                    React.createElement('option', { value: "TECH" }, "TECH"),
                                    React.createElement('option', { value: "ING" }, "ING"),
                                    React.createElement('option', { value: "COORD" }, "COORD"),
                                    React.createElement('option', { value: "ADMIN" }, "ADMIN")
                                )
                            ),
                            React.createElement('button', {
                                onClick: () => {
                                    setSelectedCell({ employeId: null, day: null });
                                    setEditingJob(null);
                                    resetJobForm();
                                    setShowJobModal(true);
                                },
                                className: "flex items-center space-x-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
                            },
                                React.createElement(Plus, { size: 18 }),
                                React.createElement('span', null, "Nouveau Job")
                            )
                        ),

                        // Tableau calendrier
                        React.createElement('div', { className: "overflow-x-auto" },
                            React.createElement('table', { className: "w-full min-w-max" },
                                React.createElement('thead', { className: "bg-gray-50 sticky top-0" },
                                    // En-tête avec mois
                                    React.createElement('tr', null,
                                        React.createElement('th', { 
                                            className: "px-4 py-2 text-left font-semibold text-gray-700 sticky left-0 bg-gray-50 z-20 border-r min-w-[200px]" 
                                        }, "Employé"),
                                        React.createElement('th', { 
                                            className: "px-2 py-2 text-left font-semibold text-gray-700 sticky left-[200px] bg-gray-50 z-20 border-r w-24" 
                                        }, "Statut"),
                                        React.createElement('th', { 
                                            className: "px-2 py-2 text-left font-semibold text-gray-700 sticky left-[296px] bg-gray-50 z-20 border-r w-32" 
                                        }, "Succursale"),
                                        ...continuousDays.map((day, index) => {
                                            const showMonth = index === 0 || day.date.getDate() === 1;
                                            return React.createElement('th', {
                                                key: index,
                                                className: `px-1 py-2 text-center font-semibold text-gray-700 w-20 border-r ${day.isWeekend ? 'bg-gray-100' : ''}`
                                            }, showMonth && React.createElement('div', { 
                                                className: "text-xs text-gray-500 font-normal" 
                                            }, day.monthName));
                                        })
                                    ),
                                    
                                    // En-tête avec jours
                                    React.createElement('tr', null,
                                        React.createElement('th', { className: "px-4 py-2 sticky left-0 bg-gray-50 z-20 border-r" }),
                                        React.createElement('th', { className: "px-2 py-2 sticky left-[200px] bg-gray-50 z-20 border-r" }),
                                        React.createElement('th', { className: "px-2 py-2 sticky left-[296px] bg-gray-50 z-20 border-r" }),
                                        ...continuousDays.map((day, index) => 
                                            React.createElement('th', {
                                                key: index,
                                                className: `px-1 py-2 text-center text-xs border-r ${day.isWeekend ? 'bg-gray-100' : 'bg-gray-50'} ${day.isToday ? 'bg-blue-100 text-blue-600 font-bold' : 'text-gray-600'}`
                                            },
                                                React.createElement('div', { className: "font-medium" }, day.dayName),
                                                React.createElement('div', { 
                                                    className: `text-sm ${day.isToday ? 'font-bold' : ''}` 
                                                }, day.dayNumber)
                                            )
                                        )
                                    )
                                ),
                                
                                React.createElement('tbody', null,
                                    ...filteredEmployes.map((employe, employeIndex) => 
                                        React.createElement('tr', {
                                            key: employe.id,
                                            className: `border-b hover:bg-gray-50 ${getPostColor(employe.poste)}`
                                        },
                                            React.createElement('td', { 
                                                className: "px-4 py-3 font-medium sticky left-0 bg-white z-10 border-r" 
                                            },
                                                React.createElement('div', { className: "text-sm font-semibold" }, employe.nom),
                                                React.createElement('div', { className: "text-xs text-gray-500" }, employe.email)
                                            ),
                                            React.createElement('td', { 
                                                className: "px-2 py-3 text-xs sticky left-[200px] bg-white z-10 border-r" 
                                            }, employe.poste),
                                            React.createElement('td', { 
                                                className: "px-2 py-3 text-xs sticky left-[296px] bg-white z-10 border-r" 
                                            }, employe.succursale),
                                            ...continuousDays.map((day, dayIndex) => {
                                                const job = getJobForCell(employe.id, day);
                                                return React.createElement('td', {
                                                    key: dayIndex,
                                                    className: `px-1 py-1 border-r cursor-pointer hover:bg-blue-50 transition-colors relative h-12 ${day.isWeekend ? 'bg-gray-50' : 'bg-white'}`,
                                                    onClick: () => handleCellClick(employe.id, day)
                                                },
                                                    job ? React.createElement('div', {
                                                        className: `w-full h-full flex items-center justify-center text-xs rounded border ${getPriorityColor(job.priorite)}`
                                                    },
                                                        React.createElement('div', { className: "text-center truncate px-1" },
                                                            React.createElement('div', { className: "font-medium" }, `#${job.numeroJob}`),
                                                            React.createElement('div', { className: "truncate text-[10px]" }, job.nom)
                                                        )
                                                    ) : React.createElement('div', {
                                                        className: "w-full h-full flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity"
                                                    }, React.createElement(Plus, { size: 12, className: "text-gray-400" }))
                                                );
                                            })
                                        )
                                    )
                                )
                            )
                        )
                    ),

                    // Contenu ressources
                    activeTab === 'ressources' && React.createElement('div', { className: "grid grid-cols-1 lg:grid-cols-2 gap-6" },
                        // Employés
                        React.createElement('div', { className: "bg-white rounded-lg shadow-sm" },
                            React.createElement('div', { className: "p-4 border-b flex justify-between items-center" },
                                React.createElement('h2', { className: "text-xl font-semibold" }, `Techniciens (${employes.length})`),
                                React.createElement('button', {
                                    onClick: () => {
                                        setEditingEmploye(null);
                                        resetEmployeForm();
                                        setShowEmployeModal(true);
                                    },
                                    className: "flex items-center space-x-2 px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
                                },
                                    React.createElement(UserPlus, { size: 16 }),
                                    React.createElement('span', null, "Ajouter")
                                )
                            ),
                            React.createElement('div', { className: "p-4 space-y-2 max-h-96 overflow-y-auto" },
                                ...employes.map(employe => 
                                    React.createElement('div', {
                                        key: employe.id,
                                        className: "flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50"
                                    },
                                        React.createElement('div', { className: "flex-1" },
                                            React.createElement('div', { className: "font-medium" }, employe.nom),
                                            React.createElement('div', { className: "text-sm text-gray-600" }, `${employe.poste} - ${employe.succursale}`),
                                            React.createElement('div', { className: "text-xs text-gray-500" }, `${employe.email} • ${employe.telephone}`)
                                        ),
                                        React.createElement('div', { className: "flex items-center space-x-2" },
                                            React.createElement('div', {
                                                className: `px-2 py-1 rounded text-xs ${employe.disponible ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`
                                            }, employe.disponible ? 'Disponible' : 'Occupé'),
                                            React.createElement('button', {
                                                onClick: () => {
                                                    setEditingEmploye(employe);
                                                    setEmployeForm({ ...employe });
                                                    setShowEmployeModal(true);
                                                },
                                                className: "p-1 hover:bg-blue-100 rounded"
                                            }, React.createElement(Edit2, { size: 16 }))
                                        )
                                    )
                                )
                            )
                        ),

                        // Équipements
                        React.createElement('div', { className: "bg-white rounded-lg shadow-sm" },
                            React.createElement('div', { className: "p-4 border-b flex justify-between items-center" },
                                React.createElement('h2', { className: "text-xl font-semibold" }, `Équipements (${equipements.length})`),
                                React.createElement('button', {
                                    onClick: () => {
                                        setEditingEquipement(null);
                                        resetEquipementForm();
                                        setShowEquipementModal(true);
                                    },
                                    className: "flex items-center space-x-2 px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
                                },
                                    React.createElement(Wrench, { size: 16 }),
                                    React.createElement('span', null, "Ajouter")
                                )
                            ),
                            React.createElement('div', { className: "p-4 space-y-2 max-h-96 overflow-y-auto" },
                                ...equipements.map(equipement => 
                                    React.createElement('div', {
                                        key: equipement.id,
                                        className: "flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50"
                                    },
                                        React.createElement('div', { className: "flex-1" },
                                            React.createElement('div', { className: "font-medium" }, equipement.nom),
                                            React.createElement('div', { className: "text-sm text-gray-600" }, `${equipement.type} - ${equipement.succursale}`),
                                            React.createElement('div', { className: "text-xs text-gray-500" }, `Série: ${equipement.numeroSerie} • Maintenance: ${equipement.derniereMaintenance}`)
                                        ),
                                        React.createElement('div', { className: "flex items-center space-x-2" },
                                            React.createElement('div', {
                                                className: `px-2 py-1 rounded text-xs ${equipement.disponible ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`
                                            }, equipement.disponible ? 'Disponible' : 'En utilisation'),
                                            React.createElement('button', {
                                                onClick: () => {
                                                    setEditingEquipement(equipement);
                                                    setEquipementForm({ ...equipement });
                                                    setShowEquipementModal(true);
                                                },
                                                className: "p-1 hover:bg-blue-100 rounded"
                                            }, React.createElement(Edit2, { size: 16 }))
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );
        };

        // Rendu de l'application
        ReactDOM.render(React.createElement(GestionnaireJobsComplet), document.getElementById('root'));
    </script>
</body>
</html>